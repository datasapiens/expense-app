{"version":3,"file":"static/js/976.3f726ed5.chunk.js","mappings":"4KAGaA,EAAiB,kBAAMC,EAAAA,EAAAA,OACvBC,EAAkDC,EAAAA,I,+MC8C/D,EAxCmB,WACjB,IAAMC,GAAeF,EAAAA,EAAAA,GAAeG,EAAAA,IAC9BC,GAAaJ,EAAAA,EAAAA,GAAeK,EAAAA,IAC5BC,GAAsBN,EAAAA,EAAAA,GAAeO,EAAAA,IACrCC,GAAoBR,EAAAA,EAAAA,GAAeS,EAAAA,IACnCC,GAAWZ,EAAAA,EAAAA,KACjB,GAAkCa,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,GAAcC,EAAAA,EAAAA,UAAQ,WAC1B,OChB4B,SAACb,EAAkCE,GACjE,IAAMF,EAAac,SAAUZ,EAAWY,OACtC,MAAO,GAGT,IACIC,EAAgB,CADL,CAAC,WAAY,SAAU,YAGhCC,EAAgBd,EAAWe,QAAO,SAACC,EAA6BC,GACpE,OAAID,EAAIC,EAAGC,MAGXF,EAAIC,EAAGC,IAAMD,EAAGE,OAFPH,IAIR,IAEGI,EAAUtB,EAAaiB,QAAO,SAACC,EAAUK,GAC7C,IAAMC,EAAeR,EAAcO,EAAIE,YAevC,OAdIP,EAAIM,MACDD,EAAIG,QAAU,IACjBR,EAAIM,GAAcG,QAAUC,OAAOL,EAAIG,UAEpCH,EAAIG,OAAS,IAChBR,EAAIM,GAAcK,SAAWC,KAAKC,IAAIH,OAAOL,EAAIG,WAGhDR,EAAIM,KACPN,EAAIM,GAAgB,CAClBG,QAASJ,EAAIG,QAAU,EAAIE,OAAOL,EAAIG,QAAU,EAChDG,SAAUN,EAAIG,OAAS,EAAII,KAAKC,IAAIH,OAAOL,EAAIG,SAAW,IAGvDR,IACN,IAEH,OAAOc,OAAOC,KAAKX,GAASL,QAAO,SAACC,EAAYgB,GAAb,wBAAyBhB,GAAzB,CAA8B,CAACgB,EAAKZ,EAAQY,GAAKP,OAAQL,EAAQY,GAAKL,aAAWd,GDnB3GoB,CAAiBnC,EAAcE,KACrC,CAACF,EAAcE,IAalB,OAXAkC,EAAAA,EAAAA,YAAU,WACRzB,EAAaC,KACZ,CAACZ,EAAcE,EAAYU,KAE9BwB,EAAAA,EAAAA,YAAU,WACHlC,EAAWY,QAAWd,EAAac,SACtCN,GAAS6B,EAAAA,EAAAA,MACT7B,GAAS8B,EAAAA,EAAAA,SAEV,KAGD,SAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,GAAI,CAAEC,GAAI,GAApD,SACGvC,GAAuBE,GACtB,SAACsC,EAAA,EAAD,CAAOC,WAAW,SAAlB,UACE,SAACC,EAAA,EAAD,MAEA9C,EAAac,QACf,SAAC,IAAD,CAAOiC,UAAU,cAAcC,KAAMtC,EAAWuC,MAAM,OAAOC,OAAO,QAAQC,cAAY,KAExF,SAACC,EAAA,EAAD,CAAYZ,UAAU,KAAKa,QAAQ,KAAnC","sources":["app/hooks/redux.ts","features/charts/Charts.tsx","features/charts/chart.utils.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { Chart } from 'react-google-charts';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks/redux';\nimport { selectTransactions, selectTransactionsLoading } from '../transactions/transactions-page/transactionSlice';\nimport { selectCategories, selectCategoriesLoading } from '../categories/categoriesSlice';\nimport { fetchTransactions } from '../transactions/transactions-page/API/transactions.service';\nimport { fetchCategories } from '../categories/API/categories.service';\nimport { maxSumByCategory } from './chart.utils';\nimport { CircularProgress, Container, Stack, Typography } from '@mui/material';\n\nconst Charts: FC = () => {\n  const transactions = useAppSelector(selectTransactions);\n  const categories = useAppSelector(selectCategories);\n  const transactionsLoading = useAppSelector(selectTransactionsLoading);\n  const categoriesLoading = useAppSelector(selectCategoriesLoading);\n  const dispatch = useAppDispatch();\n  const [chartData, setChartData] = useState([] as any[]);\n\n  const convertData = useMemo(() => {\n    return maxSumByCategory(transactions, categories);\n  }, [transactions, categories]);\n\n  useEffect(() => {\n    setChartData(convertData);\n  }, [transactions, categories, convertData]);\n\n  useEffect(() => {\n    if (!categories.length || !transactions.length) {\n      dispatch(fetchTransactions());\n      dispatch(fetchCategories());\n    }\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xl\" sx={{ py: 2 }}>\n      {transactionsLoading || categoriesLoading ? (\n        <Stack alignItems=\"center\">\n          <CircularProgress />\n        </Stack>\n      ) : transactions.length ? (\n        <Chart chartType=\"ColumnChart\" data={chartData} width=\"100%\" height=\"400px\" legendToggle />\n      ) : (\n        <Typography component=\"h1\" variant=\"h5\">\n          No data for chart, please add transaction to see chart\n        </Typography>\n      )}\n    </Container>\n  );\n};\n\nexport default Charts;\n","import { TransactionModel } from '../../app/models/transaction.model';\nimport { CategoryModel } from '../../app/models/category.model';\n\nexport const maxSumByCategory = (transactions: TransactionModel[], categories: CategoryModel[]): (string | number)[] => {\n  if (!(transactions.length && categories.length)) {\n    return [];\n  }\n\n  const header = ['Category', 'Income', 'Expense'];\n  let result: any[] = [header];\n\n  const categoriesObj = categories.reduce((acc: Record<number, string>, el) => {\n    if (acc[el.id]) {\n      return acc;\n    }\n    acc[el.id] = el.label;\n    return acc;\n  }, {});\n\n  const dataObj = transactions.reduce((acc: any, val: any) => {\n    const categoryName = categoriesObj[val.categoryId];\n    if (acc[categoryName]) {\n      if (+val.amount >= 0) {\n        acc[categoryName].income += Number(val.amount);\n      }\n      if (+val.amount < 0) {\n        acc[categoryName].expense += Math.abs(Number(val.amount));\n      }\n    }\n    if (!acc[categoryName]) {\n      acc[categoryName] = {\n        income: +val.amount >= 0 ? Number(val.amount) : 0,\n        expense: +val.amount < 0 ? Math.abs(Number(val.amount)) : 0,\n      };\n    }\n    return acc;\n  }, {});\n\n  return Object.keys(dataObj).reduce((acc: any[], key) => [...acc, [key, dataObj[key].income, dataObj[key].expense]], result);\n};\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","transactions","selectTransactions","categories","selectCategories","transactionsLoading","selectTransactionsLoading","categoriesLoading","selectCategoriesLoading","dispatch","useState","chartData","setChartData","convertData","useMemo","length","result","categoriesObj","reduce","acc","el","id","label","dataObj","val","categoryName","categoryId","amount","income","Number","expense","Math","abs","Object","keys","key","maxSumByCategory","useEffect","fetchTransactions","fetchCategories","Container","component","maxWidth","sx","py","Stack","alignItems","CircularProgress","chartType","data","width","height","legendToggle","Typography","variant"],"sourceRoot":""}